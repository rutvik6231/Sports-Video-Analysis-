# -*- coding: utf-8 -*-
"""Numerical_Column_Normalization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aJ6S06cCZ37XrNlUyIAvD_XVZWEaU_vG
"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
import numpy as np

# Load the CSV file
df = pd.read_csv('0021800573-lac-vs-phx_normalized.csv')

# Helper function to convert columns to numeric types, forcing non-convertible values to NaN
def convert_to_numeric(df, cols):
    for col in cols:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    return df

# 1. Handle Missing Values
# Fill missing numerical values with the median of the column
numerical_cols = df.select_dtypes(include=['float64', 'int64', 'object']).columns

# Convert columns to numeric, forcing non-convertible values to NaN
df = convert_to_numeric(df, numerical_cols)

# Re-identify numerical columns after conversion
numerical_cols = df.select_dtypes(include=['float64', 'int64']).columns

# Fill missing values with the median of the column
for col in numerical_cols:
    df[col].fillna(df[col].median(), inplace=True)

# Fill missing categorical values with the mode of the column
categorical_cols = df.select_dtypes(include=['object']).columns
for col in categorical_cols:
    df[col].fillna(df[col].mode()[0], inplace=True)

# 2. Normalize Numerical Data
# Use MinMaxScaler to scale numerical features to the range [0, 1]
scaler = MinMaxScaler()
df[numerical_cols] = scaler.fit_transform(df[numerical_cols])

# 3. Encode Categorical Data
# Use LabelEncoder for categorical features
encoder = LabelEncoder()
for col in categorical_cols:
    df[col] = encoder.fit_transform(df[col])

# 4. Normalize Specific Fields
# Ensure URLs and timestamps are correctly formatted
def normalize_url(url):
    if isinstance(url, str) and url.startswith("https://"):
        return url
    return ""

df['video_url'] = df['video_url'].apply(normalize_url)

# Ensure timestamps are in a consistent format
df['clock'] = pd.to_datetime(df['clock'], errors='coerce').dt.strftime('%H:%M:%S')

# Save the normalized dataframe to a new CSV file
df.to_csv('normalized_file.csv', index=False)

print("CSV file has been normalized and saved as 'normalized_file.csv'")

